var searchIndex = JSON.parse('{\
"lolrofl":{"doc":"Rust library and tool to parse and inspect ROFL replay …","t":[13,4,13,18,13,3,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,18,8,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BufferTooSmall","Errors","InvalidBuffer","MAGIC","NoData","Rofl","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","from_slice","head","into","into","iter","metadata","model","payload","segment_iter","to_string","try_from","try_from","try_into","try_into","type_id","type_id","PayloadIterator","SegmentIterator","borrow","borrow","borrow_mut","borrow_mut","from","from","internal_index","internal_index","internal_slice","internal_slice","into","into","into_iter","into_iter","is_valid","is_valid","new","new","next","next","to_error","to_error","try_from","try_from","try_into","try_into","type_id","type_id","BinHeader","PayloadHeader","Segment","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","chunk_count","data","data_mut","duration","encryption_key","file_len","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_raw_section","from_raw_source","from_slice","game_start_chunk","header_len","id","id","into","into","into","is_chunk","is_keyframe","is_loaded","keyframe_count","keyframe_interval","len","load_end_chunk","metadata_len","metadata_offset","offset","payload_header_len","payload_header_offset","payload_offset","section","section_iter","set_data","signature","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","GenericSection","KIND","SectionCore","borrow","borrow_mut","bytes","clone","clone_into","core_len","core_len","data_len","data_len","fmt","from","from_slice","into","kind","kind","len","raw_data","raw_data","to_owned","try_from","try_into","type_id"],"q":["lolrofl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lolrofl::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lolrofl::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lolrofl::model::section","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The buffer used for an operation was too small","The errors that may be raised by this crate","The buffer used for an operation was malformed or corrupted","Starting bytes of a ROFL file","No data was provided despite some being required","Base ROFL file parser","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a new Rofl instance from a ROFL file’s slice","Get the ROFL header","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Scope for all the iterators that may be used to process …","Get the loaded JSON Metadata string","Structs that map to parts of the data model of a ROFL file.","Get the loaded payload header","Get an iterator over the payload’s segments","","","","","","","","An iterator for lightweight scanning of data segments in a …","An iterator for lightweight scanning of data sections in a …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","The index in the data slice the iterator is at","The index in the data slice the iterator is at","The data slice the iterator is moving through","The data slice the iterator is moving through","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Whether the iterator is valid","Whether the iterator is valid","Build a new iterator from a raw decrypted segment’s slice","Build a new iterator from a raw decrypted segment’s slice","","","Get the last error that occured","Get the last error that occured","","","","","","","ROFL file’s header information","ROFL file’s payload header information","Container for Chunk and Keyframe data","","","","","","","Get the number of chunks","Get the raw segment’s data","Get the raw segment’s data as a mutable Vec","Get the duration of the game in milliseconds","Get the encrypted payload encryption key","Get the file’s length in bytes as per its binary data","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Build a new segment headet from a payload’s data","Create a new header from a manually-loaded file start …","Build a new segment headet from a payload’s data","Get the first game chunk","Get the file’s header length","Get the ID of the game","The segment’s ID","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether this segment is a chunk","Whether this segment is a keyframe","Whether the segment’s data section is loaded","Get the number of keyframes","Get the duration of a keyframe in milliseconds","The length in bytes of the segment’s data","Get the last loading chunk","Length of the file’s metadata section","Offset of the file’s metadata section","The offset in bytes from the segment headers’ end at …","Length of the file’s payload header section","Offset of the file’s payload header section","Offset of the file’s payload section","The sections that make up a payload segment","Get a section iterator over the data of the segment","Attach data to the Segment","Get the file’s signature","","","","","","","","","","","","","Generic data container used for quick scans and iteration …","The supported section’s ID","A generic interface for data segments’ sections","","","Get full raw internal section","","","Get the length of the constant part of the section","","Get the length of the variable part of the section","","","Returns the argument unchanged.","Create a new GenericDataSegment from a slice.","Calls <code>U::from(self)</code>.","Get the supported section’s ID","","Get the full length of the section","Get the raw variable part of the section if any and …","","","","",""],"i":[1,0,1,2,1,0,2,1,2,1,1,1,2,1,2,2,2,1,0,2,0,2,2,1,2,1,2,1,2,1,0,0,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,5,6,7,5,6,7,6,7,7,6,6,5,5,5,6,6,7,7,5,6,7,7,5,7,6,5,6,7,5,6,7,7,7,7,6,6,7,6,5,5,7,5,5,5,0,7,7,5,5,6,7,5,6,7,5,6,7,5,6,7,0,8,0,9,9,9,9,9,8,9,8,9,9,9,9,9,8,9,8,8,9,9,9,9,9],"f":[null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["errors",4],["formatter",3]],["result",6]],[[["errors",4],["formatter",3]],["result",6]],[[]],[[]],[[],["result",4,[["rofl",3],["errors",4]]]],[[["rofl",3]],["binheader",3]],[[]],[[]],null,[[["rofl",3]],["result",4,[["str",0],["errors",4]]]],null,[[["rofl",3]],["result",4,[["payloadheader",3],["errors",4]]]],[[["rofl",3]],["result",4,[["payloaditerator",3],["errors",4]]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["payloaditerator",3]],["usize",0]],[[["segmentiterator",3]],["usize",0]],[[["payloaditerator",3]]],[[["segmentiterator",3]]],[[]],[[]],[[]],[[]],[[["payloaditerator",3]],["bool",0]],[[["segmentiterator",3]],["bool",0]],[[["payloadheader",3]],["result",4,[["payloaditerator",3],["errors",4]]]],[[],["segmentiterator",3]],[[["payloaditerator",3]],["option",4]],[[["segmentiterator",3]],["option",4]],[[["payloaditerator",3]],["errors",4]],[[["segmentiterator",3]],["errors",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["payloadheader",3]],["u32",0]],[[["segment",3]],["vec",3]],[[["segment",3]],["vec",3]],[[["payloadheader",3]],["u32",0]],[[["payloadheader",3]],["str",0]],[[["binheader",3]],["usize",0]],[[["binheader",3],["formatter",3]],["result",6]],[[["binheader",3],["formatter",3]],["result",6]],[[["payloadheader",3],["formatter",3]],["result",6]],[[["payloadheader",3],["formatter",3]],["result",6]],[[["segment",3],["formatter",3]],["result",6]],[[["segment",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["segment",3]],[[],["binheader",3]],[[],["result",4,[["segment",3],["errors",4]]]],[[["payloadheader",3]],["u32",0]],[[["binheader",3]],["usize",0]],[[["payloadheader",3]],["u64",0]],[[["segment",3]],["u32",0]],[[]],[[]],[[]],[[["segment",3]],["bool",0]],[[["segment",3]],["bool",0]],[[["segment",3]],["bool",0]],[[["payloadheader",3]],["u32",0]],[[["payloadheader",3]],["u32",0]],[[["segment",3]],["usize",0]],[[["payloadheader",3]],["u32",0]],[[["binheader",3]],["usize",0]],[[["binheader",3]],["usize",0]],[[["segment",3]],["usize",0]],[[["binheader",3]],["usize",0]],[[["binheader",3]],["usize",0]],[[["binheader",3]],["usize",0]],null,[[["segment",3]],["result",4,[["segmentiterator",3],["errors",4]]]],[[["segment",3],["vec",3,[["u8",0]]]]],[[["binheader",3]],["vec",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["genericsection",3]]],[[["genericsection",3]],["genericsection",3]],[[["",0],["",0]]],[[["",0]],["usize",0]],[[["genericsection",3]],["usize",0]],[[["",0]],["usize",0]],[[["genericsection",3]],["usize",0]],[[["genericsection",3],["formatter",3]],["result",6]],[[]],[[],["result",4,[["genericsection",3],["errors",4]]]],[[]],[[["",0]],["u8",0]],[[["genericsection",3]],["u8",0]],[[["",0]],["usize",0]],[[["",0]],["option",4]],[[["genericsection",3]],["option",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[4,"Errors"],[3,"Rofl"],[3,"PayloadIterator"],[3,"SegmentIterator"],[3,"BinHeader"],[3,"PayloadHeader"],[3,"Segment"],[8,"SectionCore"],[3,"GenericSection"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
