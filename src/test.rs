
pub fn sample_base_file_0() -> Vec<u8> {
    vec![ 82, 73, 79, 84, 0, 0, // magic
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, // signature
        0x20, 1, // head size
        0xcd, 1, 0, 0, // File size
        0x20, 1, 0, 0, // Metadata offset
        0x6b, 0, 0, 0, // Metadata length
        0x8b, 1, 0, 0, // Payload header offset
        0x42, 0, 0, 0, // Payload header length
        0xcd, 1, 0, 0, // Payload offset
        // Metadata string
        0x7b, 0x22, 0x67, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x3a, 0x39, 0x31,
        0x37, 0x32, 0x32, 0x2c, 0x22, 0x67, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
        0x22, 0x3a, 0x22, 0x31, 0x32, 0x2e, 0x31, 0x30, 0x2e, 0x34, 0x34, 0x34, 0x2e, 0x32, 0x30, 0x36,
        0x38, 0x22, 0x2c, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x75, 0x6e,
        0x6b, 0x49, 0x64, 0x22, 0x3a, 0x36, 0x2c, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x46,
        0x72, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x3a, 0x32, 0x2c, 0x22, 0x73, 0x74, 0x61, 0x74, 0x73,
        0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x3a, 0x22, 0x5b, 0x5d, 0x22, 0x7d,
        // Payload header
        0xca, 0x63, 0xb6, 0x5f, 0x01, 0, 0, 0, // Match ID
        0x4a, 0x66, 0x1 , 0x0, // Match duration
        0x2, 0x0, 0x0, 0x0, // Number of keyframes
        0x6, 0x0, 0x0, 0x0, // Number of chunks
        0x1, 0x0, 0x0, 0x0, // Last data chunk
        0x2, 0x0, 0x0, 0x0, // First game chunk
        0x0, 0x87, 0x93, 0x3, // Keyframe interval
        0x20, 0x0, // Encryption Key Length
        // Encryption key
        0x30, 0x4d, 0x35, 0x44, 0x67, 0x41, 0x32, 0x50, 0x73, 0x58, 0x4a, 0x59, 0x55, 0x36, 0x69, 0x30, 0x2f, 0x49, 0x58,
        0x4f, 0x33, 0x35, 0x59, 0x6a, 0x53, 0x50, 0x66, 0x79, 0x4f, 0x63, 0x6a, 0x38,
        // Arbitrary bytes, more would follow in an actual file
        0x1,
    ]
}